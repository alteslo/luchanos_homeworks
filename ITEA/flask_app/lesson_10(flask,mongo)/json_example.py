"""Домашнее задание:

Создать документы для хранения данных о пользователях:
- организация
- номер телефона
- email
- ФИО
- должность
"""

"""
SQL базы данных - реляционные
No SQL - нереляционные

Считается, что No SQL более простые для понимания базы. Хранят в себе информацию в виде json-документов.

Когда использовать какую:

Не всегда хочется тянуть реляционную базу под проект, для простых проектов заходит и нереляционная.
Нереляционные базы по некоторым пунктам работают несколько быстрее.

Быстрее пишется, быстрее ищется. Но в ситуации, когда между таблицами есть отношения - тут реляционка выигрывает.
То есть по факту все становится хуже, когда начинаем джойнить между собой json.
Следующий фактор - масштабирование. 

Масштабирование:
1. Вертикальное - накидываем ресурсы на базу (есть границы) Актуален для реляционных.
2. Горизонтально - раскидываем базу на несколько серверов (границ нет) Тяжело использовать для реляционных.

NoSQL хорошо масштабируется горизонтально.

Python позволяет работать с MongoDB через библиотеку MongoEngine. NoSQL запрос представляет собой json, в котором
описываем правила запроса.
"""


import json

products = {
    'Onion': {
        'price': 12,
        'in_stock': 1000,
        'description': 'Лук'
    },
    'Tomato': {
        'price': 4,
        'in_stock': 10000,
        'description': 'Помидоры'
    },
    'Cucumber': {
        'price': 10,
        'in_stock': 500,
        'description': 'Огурцы'
    }
}

# сериализация
json_object = json.dumps(products)  # сериализовать в строку (dumpS)
print(json_object)

# десериализация
back_json = json.loads(json_object)  # строка обратно в словарь
print(back_json)

# кортеж и множество не сериализуется!!
json.dump()  # превратит данные из словаря в файл
json.load()  # превратит из файла в словарь
