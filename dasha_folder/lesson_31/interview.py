"""замечания:
не путать компилятор с инкапсуляцией
Python не подходит дkя мобильной разработки
frozenset - это фиксированное множество
yield - это функция, это ключевое слово
менеджер контекста - это не штука, которая открывает файл

Разобрать подробно следующие темы:
- отличия между языками с динамической типизацией и языками со статической типизацией
- повторить определение множества
- повторить про словари: что может быть ключом словаря, а что нет, сложность вставки и извлечения элемента из словаря
- что такое коллизии и методы их разрешения
- знать отличия между list(sorted(l)) и l.sort()
- comprehensions - что это и какие коллекции можно получать с их помощью
- генераторы - что такое, зачем это вообще нужно и кому, а когда оно не нужно (см. статью на Хабре!!)
- задачи на генераторы: уметь написать генератор, способный принимать число и выдавать по запросу числа от 0 до n
- итераторы: что это, зачем нужно, в каких случаях может понадобиться написать свой собственный кастомный итератор.
- менеджер контекста: что, как и почему он нужен. Уметь написать класс, объекты которого можно совать в with:
    https://www.youtube.com/watch?v=LNrYCXLdmks
    https://www.youtube.com/watch?v=0Mmz86jPKuw
- ООП: уметь рассказать и написать примеры кода на инкапсуляцию, наследование и полиморфизм
- уметь рассказать что такое интерфейс в целом
- SQL JOINS - зачем нужны, виды, сколько строчек ожидается на выходе при каждом из джойнов на примере двух произвольных таблиц
- Индесы БД - что такое, зачем нужны, какие бывают (самопроработка) и чем мы расплачиваемся за большое количество индексов
- Что такое декоратор, зачем он нужен и как его написать?

ПОЛЕЗНЫЕ МАТЕРИАЛЫ:

### Избранные статьи на Хабр
- Почему твоя мама ещё не прогает? - [Яндекс Дзен](https://habr.com/ru/company/domclick/blog/569062/)
- Хватит клепать псевдопрограммистов, или «Горшочек — не в IT!» - [Яндекс Дзен](https://habr.com/ru/company/domclick/blog/572272/)
- Генераторы для самых маленьких - [Яндекс Дзен](https://habr.com/ru/company/domclick/blog/560300/)
- Введение в асинхронное программирование на Python - [Яндекс Дзен](https://habr.com/ru/company/otus/blog/509328/)
- Асинхронный Python: различные формы конкурентности - [Яндекс Дзен](https://habr.com/ru/post/421625/)
- Типовые ошибки Python-разработчиков на собеседованиях - [Яндекс Дзен](https://habr.com/ru/company/domclick/blog/531674/)
- Как работает память в Python - [Яндекс Дзен](https://habr.com/ru/company/domclick/blog/530804/)

### Переводы на Хабр по технологиям
- Pytest - [Яндекс Дзен](https://habr.com/ru/post/448782/)
- RabbitMQ - [Яндекс Дзен](https://habr.com/ru/post/149694/)
- Docker - [Яндекс Дзен](https://habr.com/ru/company/ruvds/blog/438796/)

### Избранные курсы
- Погружение в Python - https://ru.coursera.org/learn/diving-in-python
- SQL - https://www.coursera.org/specializations/learn-sql-basics-data-science
- Advanced Python - https://www.pluralsight.com/courses/advanced-python
- Канал про Python высокого качества - https://www.pluralsight.com/authors/robert-smallshire

### Избранные книги
- Ч.Петцольд - Код. Тайный язык информатики - базовая книга для понимания того, как работают компьютеры.
- М.Лутц - Изучаем Python (2 тома) - базовые книги по Python
- М.Лутц - Программирование на Python - читать только после базовых томов
- А.Бхаргава - Грокаем алгоритмы - базовая книга по алгоритмам и структурам данных
- А.Швец - Погружение в паттерны проектирования - базовая книга по паттернам для новичков. Читать только после книг по
алгоритмам и программированию.
- Л.Ромальо - Python. К вершинам мастерства - читать только после книг по программированию.
- С.Дасгупта, Х.Пападимитриу, У.Вазирани - Алгоритмы - жёсткая книга про алгоритмы, но очень крутая. Читать только
после всего остального.

### Уроки по курсу "Основы Python"
- урок 1 - https://d2xzmw6cctk25h.cloudfront.net/record/89799/attachment/8daa5258c0ff0d8a02c892d1904f9a40.mp4
- урок 2 - https://d2xzmw6cctk25h.cloudfront.net/record/90287/attachment/715fc996743069dcaa73614fb3e49262.mp4
- урок 3 - https://d2xzmw6cctk25h.cloudfront.net/record/90303/attachment/5833b8c2c31239e03d0c7244b0f6bf66.mp4
- урок 4 - https://d2xzmw6cctk25h.cloudfront.net/record/90345/attachment/83b44f9c2af4e7284ddba4ff074f9f1f.mp4
- урок 5 - https://d2xzmw6cctk25h.cloudfront.net/record/90406/attachment/d907cbb48eeb61c9e789c70bd912c814.mp4
- урок 6 - https://d2xzmw6cctk25h.cloudfront.net/record/91023/attachment/e34208ddd2a947690b8f5a85d0ee7ee0.mp4
- урок 7 - https://d2xzmw6cctk25h.cloudfront.net/record/91712/attachment/6d7e1718350898b048a8b8625cdea16f.mp4
- урок 8 - https://d2xzmw6cctk25h.cloudfront.net/record/92518/attachment/59f800fddda98fbd6d2bf1eb9a5fa045.mp4



АБОНЕМЕНТНАЯ ДОМАШКА:

### ДЕКОРАТОРЫ
- Написать декоратор, который перед запуском декорируемой функции показывает рекламное сообщение
"Покупайте наших котиков!".  Если это задание выполнено успешно - параметризовать декоратор таким образом,
чтобы можно было опционально задавать рекламное сообщение.
- Написать декоратор, который будет проверять, что на вход функции переданы разрешённые типы данных, например list
или tuple. Если это задание выполнено успешно - параметризовать декоратор таким образом, чтобы можно было опционально
задавать список разрешённых типов.
- Написать декоратор, который в случае возниконовения исключения будет пробовать перезапустить функцию с теми же
параметрами и возвращать её результат до тех пор, пока функция не будет успешно выполнена, но не более 10 попыток.
Если за 10 попыток успешно выполнить функцию не удалось - не препятствовать прокидыванию исключения. Если это задание
выполнено успешно - параметризовать декоратор таким образом, чтобы можно было задавать колическтво попыток.
- Написать декоратор, который возвращает результат её работы и в процессе выполнения декорируемой функции записывает
в текстовый файл "logfile.txt" время окончания её работы. Если это задание выполнено успешно - параметризовать
декоратор таким образом, чтобы можно было задавать имя файла для записи логов.

### ООП
- Реализовать класс матрицы произвольного типа. При создании экземпляра передаётся вложенный список. Для объектов
класса реализовать метод сложения и вычитания матриц, их сравнения друг с другом, а также умножения деления матрицы
на число и user-friendly вывода матрицы на экран. Если задание выполнено успешно - написать тесты для проверки работы класса матрицы.
- Реализовать класс двумерного вектора. Реализовать методы, позволяющие вычитать и складывать вектора между собой,
умножать вектор на число, а также метод для user-friendly вывода информации в консоль об экземпляре. Если задание
выполнено успешно - реализовать класс трехмерного вектора, поддерживающего те же методы, что и класс двумерного вектора.
- Представьте себе, что мы проектируем систему для продажи билетов. Предполагается, что в нашей системе может быть
сразу несколько типов билетов: на мероприятие, авиабилеты, проездной на транспорт. Реализуйте вышеупомянутые классы.
При успешном выполнении задания реализовать систему для погашения билетов через нашу систему.

### ИТЕРАТОРЫ
- Написать класс "Тумбочка", в котором определить поле экземпляра inner_objects, которое при инициализации объекта
будет пустым контейнером-коллекцией. В самом классе реализовать метод add_object, который принимает на вход объект
произвольного типа и добавляет его в inner_objects. Далее для класса "Тумбочка" реализовать протокол итерации при
кототом происходит перебор всех значений в inner_objects.

- Написать итератор, в котором при необходимости можно возвращать указатель на стартовый элемент. При успешном
выполнении задания добавить метод, который позволяет ставить указатель на определённый элемент.
- Написать функцию, принимающую на вход число n и возвращающую в качестве результата объект-генератор. Объект-генератор
по запросу должен возвращать значения факториала от 0 до n.

### МЕНЕДЖЕРЫ КОНТЕКСТА
- Написать класс, объекты которого можно использовать в контрукции with. Перед началом работы в контексте в консоль
должно прилетать сообщение "начало работы в контексте", а после завершения "завершение работы в контексте"

### АЛГОРИТМЫ
- Написать функцию, которая на вход принимает 2 строки, а в результате возвращает True, если переданные строки являются
анаграммами и False если нет.
- Написать функцию, которая поределяет, является ли переданное слово полиндромом.
- Есть 2 переменные a и b. Нужно поменять значения местами.

"""


def hello(a):
    def privet():
        print("Привет, Даша!")
    return privet()


@hello
def ololo():
	return 1

print(ololo)
