"""
## Блок 1
### Easy

1. Написать простую функцию, которая на вход принимает два числа и возвращает результат
их сложения.
2. Записать эту функцию в произвольную переменную. Напечатать эту переменную на экран. Что вы видите?
3. Вызвать функцию суммирования через переменную, в которую вы только что её записали.

### Medium

1. Написать функцию, которая на вход будет принимать произвольное количество аргументов и возвращать их сумму.
2. В сигнатуре функции объявить 4 обязательных аргумента, но оставить возможность передавать в неё сколько угодно
дополнительных аргументов. Попробуйте вызвать функцию в следующих ситуациях и объясните результат:
   - прокинуть в функцию только 1 аргумент
   - прокинуть аргументы таким образом, чтобы обязательный аргумент был передан одновременно позиционно и по ключу
   - создать кортеж со значениями и распаковать его при вызове функции с помощью *
   - создать словарь со значениями и распаковать его при вызове функции с помощью * и **: что наблюдаете? Почему?

### Hard

1. Модифицировать функцию таким образом, чтобы для суммирования брались только обязательные аргументы, первые
2 аргумента из дополнительных позиционных аргументов и любой аргумент из дополнительных аргументов (если они есть),
переданных по ключу (если они есть).

"""

"""
######## Блок 1 #########
"""

# EASY

# 1. Создана функция суммирования


def easy_sum_func(first, second):
    return first + second


# 2. Результат: <function easy_sum_func at 0x00000182258AA4C0>

any_variable = easy_sum_func
print(any_variable)


# 3. Выведен результат выполнения функции

print(any_variable(2, 3))


# Medium

# 1. Создана функция суммирования


def easy_sum_func(first, second):
    return first + second


# 2. Результат: <function easy_sum_func at 0x00000182258AA4C0>

any_variable = easy_sum_func
print(any_variable)


